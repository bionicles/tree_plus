# # platform agnostic dev:prod parity profile configuration
# [[package_manager]]
# platform = "linux"
# manager = "apt-get"
# prepare = "sudo apt-get update"
# self_update = "sudo apt-get upgrade"
# list = "apt list --installed"
# install = "sudo apt-get install"
# update = "sudo apt-get upgrade"
# packages = ["node.js", ]

# [[package_manager]]
# manager_name = "cargo"
# prepare = "curl https://sh.rustup.rs -sSf | sh"
# self_update = "rustup update stable"
# list = "cargo install --list"
# install = "cargo install"
# update = "cargo update"
# packages = ["ripgrep", "bat", "exa"]

# [[package_manager]]
# manager_name = "conda"
# prepare = "wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
# self_update = "conda update conda"
# list = "conda env list"
# install = "conda create -n py310 python=3.10"
# update = "conda activate py310 && conda update --all"
# packages = []

# [[package_manager]]
# manager_name = "pip"
# prepare = "{{platform_package_manager}} install python3"
# self_update = "pip install --upgrade pip"
# list = "pip list"
# install = "pip install PACKAGE"
# update = "pip install --upgrade PACKAGE"
# packages = ["flask"]

# [[package_manager]]
# manager_name = "npm"
# prepare = "{{platform_package_manager}} install node"
# self_update = "npm install npm@latest -g"
# list = "npm -g list --depth=0"
# install = "npm install -g"
# update = "npm update -g"
# packages = ["typescript", "nodemon", "ng", "cypress", "codeceptjs"]

# [[package_manager]]
# manager_name = "golang"
# prepare = [
#     "wget https://golang.org/dl,
#     "tar -C /usr/local -xzf go?.??.?.linux-amd64.tar.gz",
#     "export PATH=$PATH:/usr/local/go/bin",
# ]
# self_update = "go get -u"
# list = "go list -m all"
# install = "go get"
# update = "go get -u"
# packages = ["fzf"]

# [[package_manager]]
# manager_name = "github cli"
# prepare = [
#     "type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)",
#     "curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg",
#     "sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg",
#     "sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg",
#     'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"',
#     "sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null",
#     "sudo apt update",
#     "sudo apt install gh -y",
#     "gh auth login"
# ]
# self_update = "sudo apt update && sudo apt install gh -y"
# list = "gh repo list"
# install = "gh repo clone"
# update = "git pull"
# dev = "make dev"
# test = "make test"
# packages = [
#     "asyme/promo",
#     "tree_plus",
#     "greedbot",
#     "atomic",
#     "neuromax",
#     "languages",
#     "coronavirus",
#     "agi",
#     "next.js",
#     "bitclinic",
#     "playing_with_fhir",
# ]

# [[package_manager]]
# manager_name = "terraform"
# prepare = [
#     "sudo apt-get update && sudo apt-get install -y gnupg software-properties-common",
#     "wget -O- https://apt.releases.hashicorp.com/gpg | \",
#     "    gpg --dearmor | \",
#     "    sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg",
#     "gpg --no-default-keyring \",
#     "   --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \",
#     "    --fingerprint",
#     'echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \",
#     '    https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \',
#     '    sudo tee /etc/apt/sources.list.d/hashicorp.list',
#     'sudo apt-get update',
#     'sudo apt-get install terraform',
#     'terraform -help',
#     'terraform -help init',
#     'terraform -help plan',
#     'terraform -help apply',
# ]
# self_update = [
#     "terraform -version | !(grep -q 'Your version of Terraform is out of date!')",
#     "sudo apt-get update",
#     "sudo apt-get install terraform -y",
# ]
# list = "terraform state list && terraform show"
# install = "terraform init"
# update = "terraform plan"
# packages = [
#     "promo"
# ]

# SEE ETL RUST CRATE