signatures = [
    "private fun foo()",
    "data class Person(val name: String, val age: Int)",
    "fun greet(person: Person)",
    "class MathOperations",
    "    fun add(a: Int, b: Int): Int",
    "    fun multiply(a: Int, b: Int): Int",
    """    fun divideWithRemainder(
        numerator: Int,
        denominator: Int
    ): Pair<Int, Int>""",
    "class GenericRepository<T>",
    "    fun getItem(id: Int): T?",
    "interface Transformable<T>",
    "    fun transform(input: T): T",
    "class AdvancedCalculator : MathOperations(), Transformable<Int>",
    "    override fun transform(input: Int): Int",
    "        fun subtract(a: Int, b: Int): Int",
    "fun <T> processItems(items: List<T>, processor: (T) -> Unit)",
    "interface Source<out T>",
    "    fun nextT(): T",
    "fun demo(strs: Source<String>)",
    "interface Comparable<in T>",
    "    operator fun compareTo(other: T): Int",
    "fun demo(x: Comparable<Number>)",
    "fun MutableList<Int>.swap(index1: Int, index2: Int)",
    "fun Any?.toString(): String",
    "fun fill(dest: Array<in String>, value: String)",
    "fun <T> singletonList(item: T): List<T>",
    "fun <T> T.basicToString(): String",
    "fun <T : Comparable<T>> sort(list: List<T>)",
    """fun <T> copyWhenGreater(list: List<T>, threshold: T): List<String>
    where T : CharSequence,
          T : Comparable<T>""",
    "public interface Game<T>",
    "    public T save(T x)",
    """    @NotNull
    public T load(@NotNull T x)""",
    "interface ArcadeGame<T1> : Game<T1>",
    "    override fun save(x: T1): T1",
    "    override fun load(x: T1 & Any): T1 & Any",
    "data class User(val name: String, val age: Int)",
    "enum class Direction",
    "enum class Color(val rgb: Int)",
    "enum class ProtocolState",
    "abstract class Animated",
    "    abstract fun animate()",
    "    open fun stopAnimating()",
    "    fun animateTwice()",
    "fun executeLambda(f: (String) -> Unit)",
    "fun sayHello(maybe: String?, neverNull: Int)",
    "internal open class TalkativeButton",
    "    private fun yell()",
    "    protected fun whisper()",
    "internal class MyTalkativeButton: TalkativeButton()",
    "    fun utter()",
    "enum class IntArithmetics : BinaryOperator<Int>, IntBinaryOperator",
    "sealed interface Error",
    "sealed class IOError(): Error",
    "class FileReadError(val file: File): IOError()",
    "class DatabaseError(val source: DataSource): IOError()",
    "object RuntimeError : Error",
    "sealed interface Error",
    "sealed class IOError(): Error",
    "open class CustomError(): Error",
    "fun log(e: Error)",
    "object Runner",
    "    inline fun <reified S: SomeClass<T>, T> run() : T",
    "enum class RGB",
    "inline fun <reified T : Enum<T>> printAllValues()",
    """fun powerOf(
    number: Int,
    exponent: Int,
)""",
    """fun read(
    b: ByteArray,
    off: Int = 0,
    len: Int = b.size,
)""",
    "open class A",
    "    open fun foo(i: Int = 10)",
    "class B : A()",
    "    override fun foo(i: Int)",
    """fun foo(
    bar: Int = 0,
    baz: Int = 1,
    qux: () -> Unit,
)""",
    """fun reformat(
    str: String,
    normalizeCase: Boolean = true,
    upperCaseFirstLetter: Boolean = true,
    divideByCamelHumps: Boolean = false,
    wordSeparator: Char = ' ',
)""",
    "fun printHello(name: String?): Unit",
    "value class Password(private val s: String)",
    "fun String.lastChar(): Char",
    "fun interface KRunnable",
    "   fun invoke()",
    "class User(val id: Int, val name: String, val address: String)",
    "fun saveUserToDb(user: User)",
    "fun interface IntPredicate",
    "   fun accept(i: Int): Boolean",
    "fun double(x: Int): Int",
    "fun implicitDouble(x: Int)",
    "fun <T> asList(vararg ts: T): List<T>",
    "open class MegaButton",
    "    fun disable()",
    "    open fun animate()",
    "class GigaButton: MegaButton()",
    "    override fun animate()",
    "open class A(x: Int)",
    "    public open val y: Int",
    "interface B { /*...*/ }",
    "interface A",
    "    fun funFromA() {}",
    "interface B",
    "class C",
    "    fun getObject() = object {",
    "    fun getObjectA() = object: A {",
    "    fun getObjectB(): B = object: A, B {",
    "val ab: A = object : A(1), B",
    "class C",
    "    private fun getObject() = object {",
    "    fun printX() {",
    "infix fun Int.shl(x: Int): Int",
    "class MyStringCollection",
    "    infix fun add(s: String)",
    "    fun build() {",
    "tailrec fun findFixPoint(x: Double = 1.0): Double",
    "interface IndexedContainer",
    "    operator fun get(index: Int)",
    "class OrdersList: IndexedContainer",
    "    override fun get(index: Int)",
    "data class Point(val x: Int, val y: Int)",
    "operator fun Point.unaryMinus()",
    "class Derived(b: Base) : Base by b",
]
